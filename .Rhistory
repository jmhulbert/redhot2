data$field.optional...what..other.factors..were.observed. <- as.factor(data$field.optional...what..other.factors..were.observed.)
data$field.tree.canopy.symptoms <- as.factor(data$field.tree.canopy.symptoms)
data$field.optional...slope.position <- as.factor(data$field.optional...slope.position)
data$field.optional...site.type <- as.factor(data$field.optional...site.type)
data$field.optional...site.location.description  <- as.factor(data$field.optional...site.location.description )
data$field.optional...tree.size <-as.factor(data$field.optional...tree.size)
data$field.other.factors...are.there.signs.or.symptoms.of.insect..diseases..or.other.damage.[data$field.other.factors...are.there.signs.or.symptoms.of.insect..diseases..or.other.damage.==""] <- "Not sure"
data$field.other.factors...are.there.signs.or.symptoms.of.insect..diseases..or.other.damage.[data$field.other.factors...are.there.signs.or.symptoms.of.insect..diseases..or.other.damage.=="Unsure"] <- "Not sure"
data$field.number.of.additional.unhealthy.trees..of.same.species..in.area..within.sight.[data$field.number.of.additional.unhealthy.trees..of.same.species..in.area..within.sight.=="4"] <- "4-6"
data$field.number.of.additional.unhealthy.trees..of.same.species..in.area..within.sight.[data$field.number.of.additional.unhealthy.trees..of.same.species..in.area..within.sight.=="5"] <- "4-6"
data$field.number.of.additional.unhealthy.trees..of.same.species..in.area..within.sight.[data$field.number.of.additional.unhealthy.trees..of.same.species..in.area..within.sight.=="2"] <- "2-3"
data$field.tree.canopy.symptoms[data$field.tree.canopy.symptoms=="Multiple Symptoms"] <-"Multiple Symptoms (please list in Notes)"
data$field.tree.canopy.symptoms[data$field.tree.canopy.symptoms=="multiple symptoms"] <-"Multiple Symptoms (please list in Notes)"
data$field.tree.canopy.symptoms[data$field.tree.canopy.symptoms=="thinning foliage"] <-"Thinning Canopy"
data$field.tree.canopy.symptoms[data$field.tree.canopy.symptoms=="healthy"] <-"Healthy"
data$field.tree.canopy.symptoms[data$field.tree.canopy.symptoms=="dead top"] <-"Old Dead Top (needles already gone)"
data$field.optional...what..other.factors..were.observed.[data$field.optional...what..other.factors..were.observed.=="Fungal Activitiy (mycelial fans, mushrooms at base, or conks on trunk)"] <-"Fungal Activitiy (mycelial fans, bleeding cankers, mushrooms at base, or conks on trunk)"
data$field.optional...what..other.factors..were.observed.[data$field.optional...what..other.factors..were.observed.=="Needle disease (dieback, checking, blight, etc.)"] <- "Needle or leaf disease (dieback, checking, blight, etc.)"
data$field.optional...slope.position[data$field.optional...slope.position=="Upper 1/3rd of a slope"] <-"Top of slope"
data$field.optional...site.type[data$field.optional...site.type=="Urban Natural"] <-"Urban"
data$field.optional...site.type[data$field.optional...site.type=="Urban Landscaped"] <-"Urban"
data$field.optional...site.type[data$field.optional...site.type=="Suburban Natural"] <-"Suburban"
data$field.optional...site.type[data$field.optional...site.type=="Suburban Lanscaped"] <-"Suburban"
data$field.optional...site.type[data$field.optional...site.type=="Natural Forest"] <-"Rural"
data$field.optional...tree.size[data$field.optional...tree.size=="Large"] <- "Large (too big to wrap arms around trunk)"
data$field.optional...tree.size[data$field.optional...tree.size=="Medium"] <- "Medium (can wrap arms around trunk)"
data$field.optional...tree.size[data$field.optional...tree.size=="Small"] <- "Small (can wrap hands around trunk)"
data$field.optional...tree.size[data$field.optional...tree.size=="Very Large"] <- "Very Large (would take many people to wrap arms around trunk)"
data$field.optional...tree.size[data$field.optional...tree.size=="Very small (can wrap a single hand around stem)"] <- "Very Small (can wrap a single hand around stem)"
data$field.optional...site.location.description [data$field.optional...site.location.description =="Yard or open park grounds"] <- "Urban yard or open park grounds"
data$field.percent.canopy.affected.... <- as.factor(data$field.percent.canopy.affected....)
data$field.percent.canopy.affected....[data$field.percent.canopy.affected....=="1-25% of the crown is unhealthy"] <- "1-29% of the canopy is unhealthy"
data$field.percent.canopy.affected....[data$field.percent.canopy.affected....=="Healthy (0%)"] <- "Healthy, no dieback(0%)"
data$field.percent.canopy.affected....[data$field.percent.canopy.affected....=="Healthy (0% is unhealthy)"] <- "Healthy, no dieback(0%)"
data$field.percent.canopy.affected....[data$field.percent.canopy.affected....=="more than 75% of the crown is unhealthy"] <- "60-99% of the canopy is unhealthy"
data <- data %>% droplevels()
data$Percent.Dieback.Modified[data$field.percent.canopy.affected....=="Healthy, no dieback(0%)"] <- 0
data$Percent.Dieback.Modified[data$field.percent.canopy.affected....=="1-29% of the canopy is unhealthy"] <- 1
data$Percent.Dieback.Modified[data$field.percent.canopy.affected....=="30-59% of the canopy is unhealthy"] <- 30
data$Percent.Dieback.Modified[data$field.percent.canopy.affected....=="60-99% of the canopy is unhealthy"] <- 60
data$Percent.Dieback.Modified[data$field.percent.canopy.affected....=="tree is dead"] <- 100
#data$field.dieback.percent[is.na(data$field.dieback.percent)] <- data$Percent.Dieback.Modified
data$field.percent.canopy.affected....[data$Percent.Dieback.Modified==100] <- "tree is dead" #there were a couple healthy trees with 100 dieback somehow..
str(data$field.dieback.percent)
has.dieback.percent <- data %>% filter(field.dieback.percent!="")
does.not.have.dieback.percent <- data %>% filter(field.dieback.percent=="")
has.dieback.percent$user.estimated.dieback <- "Yes"
does.not.have.dieback.percent$user.estimated.dieback <- "No"
does.not.have.dieback.percent$field.dieback.percent <- does.not.have.dieback.percent$Percent.Dieback.Modified
data <- rbind(has.dieback.percent,does.not.have.dieback.percent)
data$field.dieback.percent[data$field.dieback.percent<0] <- 0 # not sure why but there was one -2 percent dieback value
data <- data %>% mutate(tree.size.simplified=field.optional...tree.size)
tree_size_level_key <- c("Very Small (can wrap a single hand around stem)" = "Small", "Small (can wrap hands around trunk)" = "Small", "Medium (can wrap arms around trunk)" = "Medium", "Large (too big to wrap arms around trunk)" = "Large", "Very Large (would take many people to wrap arms around trunk)" = "Large","Other"="Other","No selection"="No Selection")
data$tree.size.simplified <- recode_factor(data$tree.size.simplified, !!!tree_size_level_key)
data$tree.size.simplified <- as.factor(data$tree.size.simplified)
data <- data %>% filter(field.tree.canopy.symptoms!="Candelabra top or very old spike top (old growth)") %>% mutate(binary.tree.canopy.symptoms=field.tree.canopy.symptoms) %>% mutate(ordinal.tree.canopy.symptoms=field.tree.canopy.symptoms) %>% mutate(reclassified.tree.canopy.symptoms=field.tree.canopy.symptoms) %>% droplevels()
binary_level_key <- c("Healthy" = "Healthy", "Thinning Canopy" = "Unhealthy", "New Dead Top (red or brown needles still attached)" = "Unhealthy", "Old Dead Top (needles already gone)" = "Unhealthy", "Tree is dead" = "Unhealthy", "Multiple Symptoms (please list in Notes)" = "Unhealthy", "Extra Cone Crop" = "Unhealthy", "Browning Canopy" = "Unhealthy","Branch Dieback or 'Flagging'" = "Unhealthy", "Other (please describe in Notes)" = "Unhealthy", "Yellowing Canopy" = "Unhealthy")
data$binary.tree.canopy.symptoms <- recode_factor(data$binary.tree.canopy.symptoms, !!!binary_level_key)
#levels(binary$field.tree.canopy.symptoms)
data$binary.tree.canopy.symptoms <- as.factor(data$binary.tree.canopy.symptoms)
ordinal_level_key <- c("Healthy" = "Healthy", "Thinning Canopy" = "Unhealthy", "New Dead Top (red or brown needles still attached)" = "Unhealthy", "Old Dead Top (needles already gone)" = "Unhealthy", "Tree is dead" = "Dead", "Multiple Symptoms (please list in Notes)" = "Unhealthy", "Extra Cone Crop" = "Unhealthy", "Browning Canopy" = "Unhealthy","Branch Dieback or 'Flagging'" = "Unhealthy", "Other (please describe in Notes)" = "Unhealthy", "Yellowing Canopy" = "Unhealthy")
data$ordinal.tree.canopy.symptoms <- recode_factor(data$ordinal.tree.canopy.symptoms, !!!ordinal_level_key)
#levels(binary$field.tree.canopy.symptoms)
data$ordinal.tree.canopy.symptoms <- as.factor(data$ordinal.tree.canopy.symptoms)
reclassified_level_key <- c("Healthy" = "Healthy", "Thinning Canopy" = "Thinning Canopy", "New Dead Top (red or brown needles still attached)" = "Dead Top", "Old Dead Top (needles already gone)" = "Dead Top", "Tree is dead" = "Tree is Dead", "Multiple Symptoms (please list in Notes)" = "Other", "Extra Cone Crop" = "Other", "Browning Canopy" = "Other","Branch Dieback or 'Flagging'" = "Other", "Other (please describe in Notes)" = "Other", "Yellowing Canopy" = "Other")
data$reclassified.tree.canopy.symptoms <- recode_factor(data$reclassified.tree.canopy.symptoms, !!!reclassified_level_key)
#levels(binary$field.tree.canopy.symptoms)
data$reclassified.tree.canopy.symptoms <- as.factor(data$reclassified.tree.canopy.symptoms)
data$top.dieback[data$reclassified.tree.canopy.symptoms=="Dead Top"] <- "Yes"
data$top.dieback[data$reclassified.tree.canopy.symptoms!="Dead Top"] <- "No"
data$top.dieback <- as.factor(data$top.dieback)
levels(data$top.dieback)
summary(data$top.dieback)
data$thinning[data$reclassified.tree.canopy.symptoms=="Thinning Canopy"] <- "Yes"
data$thinning[data$reclassified.tree.canopy.symptoms!="Thinning Canopy"] <- "No"
data$thinning <- as.factor(data$thinning)
levels(data$thinning)
summary(data$thinning)
data$dead[data$reclassified.tree.canopy.symptoms=="Tree is Dead"] <- "Yes"
data$dead[data$reclassified.tree.canopy.symptoms!="Tree is Dead"] <- "No"
data$dead <- as.factor(data$dead)
levels(data$dead)
summary(data$dead)
data$field.dieback.percent <- as.numeric(data$field.dieback.percent)
data <- data %>% mutate(field.dieback.prop = (field.dieback.percent/100))
levels(as.factor(data$scientific_name))
thuja <- data %>% filter(scientific_name!="Thuja") %>% droplevels()
thuja <- data %>% filter(scientific_name=="Thuja") %>% droplevels()
other.species <- data %>% filter(scientific_name!="Thuja plicata" |scientific_name!="Thuja") %>% droplevels()
data <- data %>% filter(scientific_name=="Thuja plicata") %>% droplevels()
other.species <- data %>% filter(scientific_name!="Thuja plicata" & scientific_name!="Thuja") %>% droplevels()
data <- data %>% filter(scientific_name=="Thuja plicata") %>% droplevels()
other.species <- data %>% filter(scientific_name!="Thuja plicata") %>% filter(scientific_name!="Thuja") %>% droplevels()
other.species <- data %>% filter(scientific_name!="Thuja plicata") %>% filter(scientific_name!="Thuja") %>% droplevels()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
inat.full <- read.csv("./WRDM-Observations-9.3.25.csv")
names(inat.full )
inat.full.qgis <- inat.full[c(1,24,25,36,37)]
#write.csv(inat.full.qgis,file="./WRDM-full-9.3.25-qgis.csv")
inat.full.heat <- read.csv("./WRDM-full-9.3.25-qgis-w-heat.csv")
redhot <- left_join(inat.full.heat,inat.full,by="id")
tac.wrc <- redhot %>% filter(tac_af1>0) %>% mutate(tac.am.c=tac_am1, tac.af.c=tac_af1,tac.pm.c=tac_pm1)
pc.wrc <- redhot %>% filter(pc_af1>0) %>% mutate(pc.am.f=pc_am1, pc.af.f=pc_af1,pc.pm.f=pc_pm1)
kc.wrc <- redhot %>% filter(kc_af1>0)  %>% mutate(kc.am.f=kc_am1, kc.af.f=kc_af1,kc.pm.f=kc_pm1)
pl.wrc <- redhot %>% filter(po_af1>0) %>% mutate(pl.am.c=po_am1, pl.af.c=po_af1,pl.pm.c=po_pm1)
tac.wrc <- tac.wrc %>% mutate(tac.am.f=((tac.am.c*1.8)+32),tac.af.f=((tac.af.c*1.8)+32),tac.pm.f=((tac.pm.c*1.8)+32)) %>% mutate(mean.temp.daily.f=((tac.am.f+tac.af.f+tac.pm.f)/3)) %>% mutate(dist.from.mean.daily.f=mean.temp.daily.f-(mean(mean.temp.daily.f,na.rm=TRUE))) %>% mutate(mean.temp.daily.c=((tac.am.c+tac.af.c+tac.pm.c)/3)) %>% mutate(dist.from.mean.daily.c=mean.temp.daily.c-(mean(mean.temp.daily.c,na.rm=TRUE))) %>% mutate(Area="Tacoma")
pc.wrc <- pc.wrc %>% mutate(pc.am.c=(((pc.am.f-32)*5)/9),pc.af.c=(((pc.af.f-32)*5)/9),pc.pm.c=(((pc.pm.f-32)*5)/9)) %>% mutate(mean.temp.daily.f=((pc.am.f+pc.af.f+pc.pm.f)/3)) %>% mutate(dist.from.mean.daily.f=mean.temp.daily.f-(mean(mean.temp.daily.f,na.rm=TRUE))) %>% mutate(mean.temp.daily.c=((pc.am.c+pc.af.c+pc.pm.c)/3)) %>% mutate(dist.from.mean.daily.c=mean.temp.daily.c-(mean(mean.temp.daily.c,na.rm=TRUE))) %>% mutate(Area="Pierce County")
kc.wrc <- kc.wrc %>% mutate(kc.am.c=(((kc.am.f-32)*5)/9),kc.af.c=(((kc.af.f-32)*5)/9),kc.pm.c=(((kc.pm.f-32)*5)/9)) %>% mutate(mean.temp.daily.f=((kc.am.f+kc.af.f+kc.pm.f)/3)) %>% mutate(dist.from.mean.daily.f=mean.temp.daily.f-(mean(mean.temp.daily.f,na.rm=TRUE))) %>% mutate(mean.temp.daily.c=((kc.am.c+kc.af.c+kc.pm.c)/3)) %>% mutate(dist.from.mean.daily.c=mean.temp.daily.c-(mean(mean.temp.daily.c,na.rm=TRUE))) %>% mutate(Area="King County")
pl.wrc <- pl.wrc %>% mutate(pl.am.f=((pl.am.c*1.8)+32),pl.af.f=((pl.af.c*1.8)+32),pl.pm.f=((pl.pm.c*1.8)+32)) %>% mutate(mean.temp.daily.f=((pl.am.f+pl.af.f+pl.pm.f)/3)) %>% mutate(dist.from.mean.daily.f=mean.temp.daily.f-(mean(mean.temp.daily.f,na.rm=TRUE))) %>% mutate(mean.temp.daily.c=((pl.am.c+pl.af.c+pl.pm.c)/3)) %>% mutate(dist.from.mean.daily.c=mean.temp.daily.c-(mean(mean.temp.daily.c,na.rm=TRUE))) %>% mutate(Area="Portland")
tac.wrc <- tac.wrc %>% mutate(dist.from.mean.am.c = tac.am.c-(mean(tac.am.c,na.rm=TRUE)),dist.from.mean.am.f=tac.am.f-(mean(tac.am.f,na.rm=TRUE)))
pc.wrc <- pc.wrc %>% mutate(dist.from.mean.am.c = pc.am.c-(mean(pc.am.c,na.rm=TRUE)),dist.from.mean.am.f=pc.am.f-(mean(pc.am.f,na.rm=TRUE)))
kc.wrc <- kc.wrc %>% mutate(dist.from.mean.am.c = kc.am.c-(mean(kc.am.c,na.rm=TRUE)),dist.from.mean.am.f=kc.am.f-(mean(kc.am.f,na.rm=TRUE)))
pl.wrc <- pl.wrc %>%  mutate(dist.from.mean.am.c = pl.am.c-(mean(pl.am.c,na.rm=TRUE)),dist.from.mean.am.f=pl.am.f-(mean(pl.am.f,na.rm=TRUE)))
tac.wrc <- tac.wrc %>% mutate(dist.from.mean.af.c = tac.af.c-(mean(tac.af.c,na.rm=TRUE)),dist.from.mean.af.f=tac.af.f-(mean(tac.af.f,na.rm=TRUE)))
pc.wrc <- pc.wrc %>% mutate(dist.from.mean.af.c = pc.af.c-(mean(pc.af.c,na.rm=TRUE)),dist.from.mean.af.f=pc.af.f-(mean(pc.af.f,na.rm=TRUE)))
kc.wrc <- kc.wrc %>% mutate(dist.from.mean.af.c = kc.af.c-(mean(kc.af.c,na.rm=TRUE)),dist.from.mean.af.f=kc.af.f-(mean(kc.af.f,na.rm=TRUE)))
pl.wrc <- pl.wrc %>%  mutate(dist.from.mean.af.c = pl.af.c-(mean(pl.af.c,na.rm=TRUE)),dist.from.mean.af.f=pl.af.f-(mean(pl.af.f,na.rm=TRUE)))
tac.wrc <- tac.wrc %>% mutate(dist.from.mean.pm.c = tac.pm.c-(mean(tac.pm.c,na.rm=TRUE)),dist.from.mean.pm.f=tac.pm.f-(mean(tac.pm.f,na.rm=TRUE)))
pc.wrc <- pc.wrc %>% mutate(dist.from.mean.pm.c = pc.pm.c-(mean(pc.pm.c,na.rm=TRUE)),dist.from.mean.pm.f=pc.pm.f-(mean(pc.pm.f,na.rm=TRUE)))
kc.wrc <- kc.wrc %>% mutate(dist.from.mean.pm.c = kc.pm.c-(mean(kc.pm.c,na.rm=TRUE)),dist.from.mean.pm.f=kc.pm.f-(mean(kc.pm.f,na.rm=TRUE)))
pl.wrc <- pl.wrc %>%  mutate(dist.from.mean.pm.c = pl.pm.c-(mean(pl.pm.c,na.rm=TRUE)),dist.from.mean.pm.f=pl.pm.f-(mean(pl.pm.f,na.rm=TRUE)))
data <- bind_rows(tac.wrc,pc.wrc,kc.wrc,pl.wrc)
data$field.number.of.additional.unhealthy.trees..of.same.species..in.area..within.sight. <- as.factor(data$field.number.of.additional.unhealthy.trees..of.same.species..in.area..within.sight.)
data$field.optional...what..other.factors..were.observed. <- as.factor(data$field.optional...what..other.factors..were.observed.)
data$field.tree.canopy.symptoms <- as.factor(data$field.tree.canopy.symptoms)
data$field.optional...slope.position <- as.factor(data$field.optional...slope.position)
data$field.optional...site.type <- as.factor(data$field.optional...site.type)
data$field.optional...site.location.description  <- as.factor(data$field.optional...site.location.description )
data$field.optional...tree.size <-as.factor(data$field.optional...tree.size)
data$field.other.factors...are.there.signs.or.symptoms.of.insect..diseases..or.other.damage.[data$field.other.factors...are.there.signs.or.symptoms.of.insect..diseases..or.other.damage.==""] <- "Not sure"
data$field.other.factors...are.there.signs.or.symptoms.of.insect..diseases..or.other.damage.[data$field.other.factors...are.there.signs.or.symptoms.of.insect..diseases..or.other.damage.=="Unsure"] <- "Not sure"
data$field.number.of.additional.unhealthy.trees..of.same.species..in.area..within.sight.[data$field.number.of.additional.unhealthy.trees..of.same.species..in.area..within.sight.=="4"] <- "4-6"
data$field.number.of.additional.unhealthy.trees..of.same.species..in.area..within.sight.[data$field.number.of.additional.unhealthy.trees..of.same.species..in.area..within.sight.=="5"] <- "4-6"
data$field.number.of.additional.unhealthy.trees..of.same.species..in.area..within.sight.[data$field.number.of.additional.unhealthy.trees..of.same.species..in.area..within.sight.=="2"] <- "2-3"
data$field.tree.canopy.symptoms[data$field.tree.canopy.symptoms=="Multiple Symptoms"] <-"Multiple Symptoms (please list in Notes)"
data$field.tree.canopy.symptoms[data$field.tree.canopy.symptoms=="multiple symptoms"] <-"Multiple Symptoms (please list in Notes)"
data$field.tree.canopy.symptoms[data$field.tree.canopy.symptoms=="thinning foliage"] <-"Thinning Canopy"
data$field.tree.canopy.symptoms[data$field.tree.canopy.symptoms=="healthy"] <-"Healthy"
data$field.tree.canopy.symptoms[data$field.tree.canopy.symptoms=="dead top"] <-"Old Dead Top (needles already gone)"
data$field.optional...what..other.factors..were.observed.[data$field.optional...what..other.factors..were.observed.=="Fungal Activitiy (mycelial fans, mushrooms at base, or conks on trunk)"] <-"Fungal Activitiy (mycelial fans, bleeding cankers, mushrooms at base, or conks on trunk)"
data$field.optional...what..other.factors..were.observed.[data$field.optional...what..other.factors..were.observed.=="Needle disease (dieback, checking, blight, etc.)"] <- "Needle or leaf disease (dieback, checking, blight, etc.)"
data$field.optional...slope.position[data$field.optional...slope.position=="Upper 1/3rd of a slope"] <-"Top of slope"
data$field.optional...site.type[data$field.optional...site.type=="Urban Natural"] <-"Urban"
data$field.optional...site.type[data$field.optional...site.type=="Urban Landscaped"] <-"Urban"
data$field.optional...site.type[data$field.optional...site.type=="Suburban Natural"] <-"Suburban"
data$field.optional...site.type[data$field.optional...site.type=="Suburban Lanscaped"] <-"Suburban"
data$field.optional...site.type[data$field.optional...site.type=="Natural Forest"] <-"Rural"
data$field.optional...tree.size[data$field.optional...tree.size=="Large"] <- "Large (too big to wrap arms around trunk)"
data$field.optional...tree.size[data$field.optional...tree.size=="Medium"] <- "Medium (can wrap arms around trunk)"
data$field.optional...tree.size[data$field.optional...tree.size=="Small"] <- "Small (can wrap hands around trunk)"
data$field.optional...tree.size[data$field.optional...tree.size=="Very Large"] <- "Very Large (would take many people to wrap arms around trunk)"
data$field.optional...tree.size[data$field.optional...tree.size=="Very small (can wrap a single hand around stem)"] <- "Very Small (can wrap a single hand around stem)"
data$field.optional...site.location.description [data$field.optional...site.location.description =="Yard or open park grounds"] <- "Urban yard or open park grounds"
data$field.percent.canopy.affected.... <- as.factor(data$field.percent.canopy.affected....)
data$field.percent.canopy.affected....[data$field.percent.canopy.affected....=="1-25% of the crown is unhealthy"] <- "1-29% of the canopy is unhealthy"
data$field.percent.canopy.affected....[data$field.percent.canopy.affected....=="Healthy (0%)"] <- "Healthy, no dieback(0%)"
data$field.percent.canopy.affected....[data$field.percent.canopy.affected....=="Healthy (0% is unhealthy)"] <- "Healthy, no dieback(0%)"
data$field.percent.canopy.affected....[data$field.percent.canopy.affected....=="more than 75% of the crown is unhealthy"] <- "60-99% of the canopy is unhealthy"
data <- data %>% droplevels()
data$Percent.Dieback.Modified[data$field.percent.canopy.affected....=="Healthy, no dieback(0%)"] <- 0
data$Percent.Dieback.Modified[data$field.percent.canopy.affected....=="1-29% of the canopy is unhealthy"] <- 1
data$Percent.Dieback.Modified[data$field.percent.canopy.affected....=="30-59% of the canopy is unhealthy"] <- 30
data$Percent.Dieback.Modified[data$field.percent.canopy.affected....=="60-99% of the canopy is unhealthy"] <- 60
data$Percent.Dieback.Modified[data$field.percent.canopy.affected....=="tree is dead"] <- 100
#data$field.dieback.percent[is.na(data$field.dieback.percent)] <- data$Percent.Dieback.Modified
data$field.percent.canopy.affected....[data$Percent.Dieback.Modified==100] <- "tree is dead" #there were a couple healthy trees with 100 dieback somehow..
str(data$field.dieback.percent)
has.dieback.percent <- data %>% filter(field.dieback.percent!="")
does.not.have.dieback.percent <- data %>% filter(field.dieback.percent=="")
has.dieback.percent$user.estimated.dieback <- "Yes"
does.not.have.dieback.percent$user.estimated.dieback <- "No"
does.not.have.dieback.percent$field.dieback.percent <- does.not.have.dieback.percent$Percent.Dieback.Modified
data <- rbind(has.dieback.percent,does.not.have.dieback.percent)
data$field.dieback.percent[data$field.dieback.percent<0] <- 0 # not sure why but there was one -2 percent dieback value
data <- data %>% mutate(tree.size.simplified=field.optional...tree.size)
tree_size_level_key <- c("Very Small (can wrap a single hand around stem)" = "Small", "Small (can wrap hands around trunk)" = "Small", "Medium (can wrap arms around trunk)" = "Medium", "Large (too big to wrap arms around trunk)" = "Large", "Very Large (would take many people to wrap arms around trunk)" = "Large","Other"="Other","No selection"="No Selection")
data$tree.size.simplified <- recode_factor(data$tree.size.simplified, !!!tree_size_level_key)
data$tree.size.simplified <- as.factor(data$tree.size.simplified)
data <- data %>% filter(field.tree.canopy.symptoms!="Candelabra top or very old spike top (old growth)") %>% mutate(binary.tree.canopy.symptoms=field.tree.canopy.symptoms) %>% mutate(ordinal.tree.canopy.symptoms=field.tree.canopy.symptoms) %>% mutate(reclassified.tree.canopy.symptoms=field.tree.canopy.symptoms) %>% droplevels()
binary_level_key <- c("Healthy" = "Healthy", "Thinning Canopy" = "Unhealthy", "New Dead Top (red or brown needles still attached)" = "Unhealthy", "Old Dead Top (needles already gone)" = "Unhealthy", "Tree is dead" = "Unhealthy", "Multiple Symptoms (please list in Notes)" = "Unhealthy", "Extra Cone Crop" = "Unhealthy", "Browning Canopy" = "Unhealthy","Branch Dieback or 'Flagging'" = "Unhealthy", "Other (please describe in Notes)" = "Unhealthy", "Yellowing Canopy" = "Unhealthy")
data$binary.tree.canopy.symptoms <- recode_factor(data$binary.tree.canopy.symptoms, !!!binary_level_key)
#levels(binary$field.tree.canopy.symptoms)
data$binary.tree.canopy.symptoms <- as.factor(data$binary.tree.canopy.symptoms)
ordinal_level_key <- c("Healthy" = "Healthy", "Thinning Canopy" = "Unhealthy", "New Dead Top (red or brown needles still attached)" = "Unhealthy", "Old Dead Top (needles already gone)" = "Unhealthy", "Tree is dead" = "Dead", "Multiple Symptoms (please list in Notes)" = "Unhealthy", "Extra Cone Crop" = "Unhealthy", "Browning Canopy" = "Unhealthy","Branch Dieback or 'Flagging'" = "Unhealthy", "Other (please describe in Notes)" = "Unhealthy", "Yellowing Canopy" = "Unhealthy")
data$ordinal.tree.canopy.symptoms <- recode_factor(data$ordinal.tree.canopy.symptoms, !!!ordinal_level_key)
#levels(binary$field.tree.canopy.symptoms)
data$ordinal.tree.canopy.symptoms <- as.factor(data$ordinal.tree.canopy.symptoms)
reclassified_level_key <- c("Healthy" = "Healthy", "Thinning Canopy" = "Thinning Canopy", "New Dead Top (red or brown needles still attached)" = "Dead Top", "Old Dead Top (needles already gone)" = "Dead Top", "Tree is dead" = "Tree is Dead", "Multiple Symptoms (please list in Notes)" = "Other", "Extra Cone Crop" = "Other", "Browning Canopy" = "Other","Branch Dieback or 'Flagging'" = "Other", "Other (please describe in Notes)" = "Other", "Yellowing Canopy" = "Other")
data$reclassified.tree.canopy.symptoms <- recode_factor(data$reclassified.tree.canopy.symptoms, !!!reclassified_level_key)
#levels(binary$field.tree.canopy.symptoms)
data$reclassified.tree.canopy.symptoms <- as.factor(data$reclassified.tree.canopy.symptoms)
data$top.dieback[data$reclassified.tree.canopy.symptoms=="Dead Top"] <- "Yes"
data$top.dieback[data$reclassified.tree.canopy.symptoms!="Dead Top"] <- "No"
data$top.dieback <- as.factor(data$top.dieback)
levels(data$top.dieback)
summary(data$top.dieback)
data$thinning[data$reclassified.tree.canopy.symptoms=="Thinning Canopy"] <- "Yes"
data$thinning[data$reclassified.tree.canopy.symptoms!="Thinning Canopy"] <- "No"
data$thinning <- as.factor(data$thinning)
levels(data$thinning)
summary(data$thinning)
data$dead[data$reclassified.tree.canopy.symptoms=="Tree is Dead"] <- "Yes"
data$dead[data$reclassified.tree.canopy.symptoms!="Tree is Dead"] <- "No"
data$dead <- as.factor(data$dead)
levels(data$dead)
summary(data$dead)
data$field.dieback.percent <- as.numeric(data$field.dieback.percent)
data <- data %>% mutate(field.dieback.prop = (field.dieback.percent/100))
levels(as.factor(data$scientific_name))
other.species <- data %>% filter(scientific_name!="Thuja plicata") %>% filter(scientific_name!="Thuja") %>% droplevels()
data <- data %>% filter(scientific_name=="Thuja plicata" | scientific_name=="Thuja") %>% droplevels()
ggplot(data,aes(dist.from.mean.af,field.dieback.percent))+geom_point()+theme_bw()
ggplot(data,aes(dist.from.mean.af.c,field.dieback.percent))+geom_point()+theme_bw()
ggplot(data,aes(dist.from.mean.af.f,field.dieback.percent))+geom_point()+theme_bw()
data <- data %>% filter(dist.from.mean.af.f>(-8))
ggplot(data,aes(dist.from.mean.af.f,field.dieback.percent))+geom_point()+theme_bw()
ggplot(data,aes(dist.from.mean.af.c,field.dieback.percent))+geom_point()+theme_bw()
ggplot(data,aes(dist.from.mean.af.c,field.dieback.percent))+geom_point()+theme_bw()
write.csv(data,file="./urban-data-modified.csv")
knitr::opts_chunk$set(echo = TRUE)
install.packages("gghalves")
data <- read.csv("./data/urban-data.modified.csv")
data <- read.csv('https://raw.githubusercontent.com/jmhulbert/redhot2/refs/heads/main/data/urban-data-modified.csv')
knitr::opts_chunk$set(echo = TRUE)
install.packages("glmmTMB","bbmle","DHARMa")
install.packages("glmmTMB","bbmle","DHARMa")
yes
install.packages("glmmTMB","bbmle","DHARMa")
install.packages("glmmTMB","bbmle","DHARMa")
p2 <- ggplot(new.data.2.inf, aes(x = dist.from.mean.af.c, y = predicted_response)) + geom_line() + labs(x = "Distance from mean (C)", y = "Predicted Response") + scale_x_continuous(limits = c(-40, 40)) +theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(corrplot)
library(knitr)
library(kableExtra)
library(gghalves)
library(patchwork)
library(scales)
library(glmmTMB)
library(bbmle)
library(DHARMa)
data <- read.csv('https://raw.githubusercontent.com/jmhulbert/redhot2/refs/heads/main/data/urban-data-modified.csv')
# Remove Dead Trees
data.w.dead <- data
data <- data %>% filter(field.tree.canopy.symptoms!="Tree is dead") %>% filter(field.dieback.percent<100) %>% droplevels()
data$binary.tree.canopy.symptoms <- as.factor(data$binary.tree.canopy.symptoms)
levels(data$binary.tree.canopy.symptoms)
data <- data %>% filter(!str_detect(place_guess, "Hoyt") & !str_detect(place_guess, "hoyt"))
ggplot(data,aes(binary.tree.canopy.symptoms))+geom_histogram(stat="count")+theme_bw()+coord_flip()
p1 <-ggplot(data,aes(binary.tree.canopy.symptoms,dist.from.mean.af.c, fill=binary.tree.canopy.symptoms ))+geom_boxplot(alpha=0.5)+theme_bw()+coord_flip() + scale_fill_manual(name="Tree Condition",values=c("#7fcdbb","#fe9929"))+guides(fill=FALSE) +labs(x="Tree Condition",y=NULL)
p2 <-ggplot(data,aes(dist.from.mean.af.c,fill=binary.tree.canopy.symptoms))+geom_density(alpha=0.5) + scale_fill_manual(name="Tree Condition",values=c("#7fcdbb","#fe9929")) +theme_bw() +labs(x="Distance from Mean Afternoon Temperature") +guides(fill=FALSE)
p1 / p2
ggplot(data,aes(reclassified.tree.canopy.symptoms))+geom_histogram(stat="count")+theme_bw()+coord_flip()
data$top.dieback <- as.factor(data$top.dieback)
data$thinning <- as.factor(data$thinning)
ggplot(data,aes(reclassified.tree.canopy.symptoms,dist.from.mean.af.c ))+geom_boxplot()+theme_bw()+coord_flip()
king <- data %>% filter(Area=="King County")
king <- king %>% filter(field.optional...site.type=="Urban"|field.optional...site.type=="Suburban"|field.optional...site.type=="Rural")
ggplot(king,aes(field.optional...site.type,dist.from.mean.af.c ))+geom_boxplot()+theme_bw()+coord_flip()
binomial.daily <- glmmTMB(binary.tree.canopy.symptoms ~ dist.from.mean.daily.c + (1|Area),family=binomial,data=data)
binomial.am <- glmmTMB(binary.tree.canopy.symptoms ~ dist.from.mean.am.c + (1|Area),data=data,family=binomial)
binomial.af <- glmmTMB(binary.tree.canopy.symptoms ~ dist.from.mean.af.c + (1|Area),data=data,family=binomial)
binomial.pm <- glmmTMB(binary.tree.canopy.symptoms ~ dist.from.mean.pm.c + (1|Area),data=data,family=binomial)
AICtab(binomial.daily,binomial.am,binomial.af,binomial.pm)
#binomial.af <- glmmTMB(binary.tree.canopy.symptoms ~ dist.from.mean.af.c + (1|Area),data=data,family=binomial)
summary(binomial.af)
levels(data$binary.tree.canopy.symptoms)
#predict(binomial.af,data[data$DN_AF1=0,])
#predict(binomial.af,DN_AF1=0)
# Create a data frame for predictions
new.data <- expand.grid(
dist.from.mean.af.c = seq(min(data$dist.from.mean.af.c), max(data$dist.from.mean.af.c), length.out = 100),  # keeping predictor2 constant at its mean
Area = 0  # assuming random effect is zero for prediction
)
new.data$predicted_response <- predict(binomial.af, newdata = new.data, type = "response")
p1 <- ggplot(new.data, aes(x = dist.from.mean.af.c, y = predicted_response)) +
geom_line() +
labs(x = "Distance from mean (C)", y = "Predicted Response") +
theme_minimal()
p1
# Create a data frame for predictions
new.data.2.inf <- expand.grid(
dist.from.mean.af.c = seq(min(data$dist.from.mean.af.c), max(100), length.out = 1000), Area = 0)  # keeping predictor2 constant at its mean
new.data.2.inf$predicted_response <- predict(binomial.af, newdata = new.data.2.inf, type = "response")
p2 <- ggplot(new.data.2.inf, aes(x = dist.from.mean.af.c, y = predicted_response)) + geom_line() + labs(x = "Distance from mean (C)", y = "Predicted Response") + scale_x_continuous(limits = c(-10, 60)) +theme_minimal()
p2
p1 + p2
new_data <- data.frame(dist.from.mean.af.c = -2,Area=0)
predicted_response <- predict(binomial.af, newdata = new_data, type = "response")
print(predicted_response)
new_data <- data.frame(dist.from.mean.af.c = 0,Area=0)
predicted_response <- predict(binomial.af, newdata = new_data, type = "response")
print(predicted_response)
new_data <- data.frame(dist.from.mean.af.c = 2,Area=0)
predicted_response <- predict(binomial.af, newdata = new_data, type = "response")
print(predicted_response)
data.top <- data %>% filter(reclassified.tree.canopy.symptoms=="Healthy"|reclassified.tree.canopy.symptoms=="Dead Top") %>% droplevels()
top.dieback.binomial.af <- glmmTMB(top.dieback ~ dist.from.mean.af.c + (1|Area),data=data.top,family=binomial)
summary(top.dieback.binomial.af)
levels(data$top.dieback)
p3 <-ggplot(data,aes(top.dieback,dist.from.mean.af.c, fill=top.dieback ))+geom_boxplot(alpha=0.5)+theme_bw()+coord_flip() + scale_fill_manual(name="Top Dieback",values=c("#7fcdbb","#fe9929"))+guides(fill=FALSE) +labs(x="Top Dieback",y=NULL)
p4 <-ggplot(data,aes(dist.from.mean.af.c,fill=top.dieback))+geom_density(alpha=0.5) + scale_fill_manual(name="Top Dieback",values=c("#7fcdbb","#fe9929")) +theme_bw() +labs(x="Distance from Mean Afternoon Temperature") +guides(fill=FALSE)
p3 / p4
# Create a data frame for predictions
new.data.2 <- expand.grid(
dist.from.mean.af.c = seq(min(data$dist.from.mean.af.c), max(data$dist.from.mean.af.c), length.out = 100),  # keeping predictor2 constant at its mean
Area = 0  # assuming random effect is zero for prediction
)
new.data.2$predicted_response <- predict(top.dieback.binomial.af, newdata = new.data.2, type = "response")
ggplot(new.data.2, aes(x = dist.from.mean.af.c, y = predicted_response)) +
geom_line() +
labs(x = "Distance from Mean Temperature", y = "Predicted Response") +
theme_minimal()
new_data <- data.frame(dist.from.mean.af.c = 0,Area=0)
predicted_response <- predict(top.dieback.binomial.af, newdata = new_data, type = "response")
print(predicted_response)
new_data <- data.frame(dist.from.mean.af.c = 2,Area=0)
predicted_response <- predict(top.dieback.binomial.af, newdata = new_data, type = "response")
print(predicted_response)
p1 <- ggplot(new.data, aes(x = dist.from.mean.af.c, y = predicted_response)) +
geom_smooth() +
labs(x = "Distance from mean (C)", y = "Predicted Response") +
theme_minimal()
p1
p1 <- ggplot(new.data, aes(x = dist.from.mean.af.c, y = predicted_response)) +
geom_smooth(method=loess()) +
labs(x = "Distance from mean (C)", y = "Predicted Response") +
theme_minimal()
?geom_smooth()
p1 <- ggplot(new.data, aes(x = dist.from.mean.af.c, y = predicted_response)) +
geom_smooth(method=lm) +
labs(x = "Distance from mean (C)", y = "Predicted Response") +
theme_minimal()
p1
p1 <- ggplot(new.data, aes(x = dist.from.mean.af.c, y = predicted_response)) +
geom_smooth(method=lm) +
labs(x = "Distance from mean (C)", y = "Predicted Response") +
theme_minimal()
p1
p1 <- ggplot(new.data, aes(x = dist.from.mean.af.c, y = predicted_response)) +
geom_smooth(method=glm) +
labs(x = "Distance from mean (C)", y = "Predicted Response") +
theme_minimal()
p1 <- ggplot(new.data, aes(x = dist.from.mean.af.c, y = predicted_response)) +
geom_smooth(method=glm) +
labs(x = "Distance from mean (C)", y = "Predicted Response") +
theme_minimal()
p1
geom_smooth(method = "glm", method.args = list(family = "binomial") +
p1 <- ggplot(new.data, aes(x = dist.from.mean.af.c, y = predicted_response)) +
geom_smooth(method = "glm", method.args = list(family = "binomial") +
labs(x = "Distance from mean (C)", y = "Predicted Response") +
theme_minimal()
p1
p1 <- ggplot(new.data, aes(x = dist.from.mean.af.c, y = predicted_response)) +
geom_smooth(method = "glm", method.args = list(family = "binomial") +
labs(x = "Distance from mean (C)", y = "Predicted Response") +
theme_minimal()
p1
p1 <- ggplot(new.data, aes(x = dist.from.mean.af.c, y = predicted_response)) +
geom_smooth(method = "glm", method.args = list(family = "binomial") +
labs(x = "Distance from mean (C)", y = "Predicted Response") + theme_minimal()
p1
p1 <- ggplot(new.data, aes(x = dist.from.mean.af.c, y = predicted_response)) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(x = "Distance from mean (C)", y = "Predicted Response") + theme_minimal()
p1
p1 <- ggplot(new.data, aes(x = dist.from.mean.af.c, y = predicted_response)) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(x = "Distance from mean (C)", y = "Predicted Response") + theme_minimal() + geom_point()
p1 <- ggplot(new.data, aes(x = dist.from.mean.af.c, y = predicted_response)) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(x = "Distance from mean (C)", y = "Predicted Response") + theme_minimal() + geom_point()
p1
p1 <- ggplot(new.data, aes(x = dist.from.mean.af.c, y = predicted_response)) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(x = "Distance from mean (C)", y = "Predicted Response") + theme_minimal()
p1
p2 <- ggplot(new.data.2.inf, aes(x = dist.from.mean.af.c, y = predicted_response)) + geom_line() + labs(x = "Distance from mean (C)", y = "Predicted Response") + scale_x_continuous(limits = c(-10, 60)) +theme_minimal()
p2
p2 <- ggplot(new.data.2.inf, aes(x = dist.from.mean.af.c, y = predicted_response)) +geom_smooth(method = "glm", method.args = list(family = "binomial")) + labs(x = "Distance from mean (C)", y = "Predicted Response") + scale_x_continuous(limits = c(-10, 60)) +theme_minimal()
p2
p1 + p2
ggplot(new.data.2, aes(x = dist.from.mean.af.c, y = predicted_response)) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(x = "Distance from Mean Temperature", y = "Predicted Response") +
theme_minimal()
ggplot(new.data.3, aes(x = dist.from.mean.af.c, y = predicted_response)) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(x = "Distance from Mean Temperature", y = "Predicted Response") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(corrplot)
library(knitr)
library(kableExtra)
library(gghalves)
library(patchwork)
library(scales)
library(glmmTMB)
library(bbmle)
library(DHARMa)
data <- read.csv('https://raw.githubusercontent.com/jmhulbert/redhot2/refs/heads/main/data/urban-data-modified.csv')
# Remove Dead Trees
data.w.dead <- data
data <- data %>% filter(field.tree.canopy.symptoms!="Tree is dead") %>% filter(field.dieback.percent<100) %>% droplevels()
data$binary.tree.canopy.symptoms <- as.factor(data$binary.tree.canopy.symptoms)
levels(data$binary.tree.canopy.symptoms)
data <- data %>% filter(!str_detect(place_guess, "Hoyt") & !str_detect(place_guess, "hoyt"))
ggplot(data,aes(binary.tree.canopy.symptoms))+geom_histogram(stat="count")+theme_bw()+coord_flip()
p1 <-ggplot(data,aes(binary.tree.canopy.symptoms,dist.from.mean.af.c, fill=binary.tree.canopy.symptoms ))+geom_boxplot(alpha=0.5)+theme_bw()+coord_flip() + scale_fill_manual(name="Tree Condition",values=c("#7fcdbb","#fe9929"))+guides(fill=FALSE) +labs(x="Tree Condition",y=NULL)
p2 <-ggplot(data,aes(dist.from.mean.af.c,fill=binary.tree.canopy.symptoms))+geom_density(alpha=0.5) + scale_fill_manual(name="Tree Condition",values=c("#7fcdbb","#fe9929")) +theme_bw() +labs(x="Distance from Mean Afternoon Temperature") +guides(fill=FALSE)
p1 / p2
ggplot(data,aes(reclassified.tree.canopy.symptoms))+geom_histogram(stat="count")+theme_bw()+coord_flip()
data$top.dieback <- as.factor(data$top.dieback)
data$thinning <- as.factor(data$thinning)
ggplot(data,aes(reclassified.tree.canopy.symptoms,dist.from.mean.af.c ))+geom_boxplot()+theme_bw()+coord_flip()
king <- data %>% filter(Area=="King County")
king <- king %>% filter(field.optional...site.type=="Urban"|field.optional...site.type=="Suburban"|field.optional...site.type=="Rural")
ggplot(king,aes(field.optional...site.type,dist.from.mean.af.c ))+geom_boxplot()+theme_bw()+coord_flip()
binomial.daily <- glmmTMB(binary.tree.canopy.symptoms ~ dist.from.mean.daily.c + (1|Area),family=binomial,data=data)
binomial.am <- glmmTMB(binary.tree.canopy.symptoms ~ dist.from.mean.am.c + (1|Area),data=data,family=binomial)
binomial.af <- glmmTMB(binary.tree.canopy.symptoms ~ dist.from.mean.af.c + (1|Area),data=data,family=binomial)
binomial.pm <- glmmTMB(binary.tree.canopy.symptoms ~ dist.from.mean.pm.c + (1|Area),data=data,family=binomial)
AICtab(binomial.daily,binomial.am,binomial.af,binomial.pm)
#binomial.af <- glmmTMB(binary.tree.canopy.symptoms ~ dist.from.mean.af.c + (1|Area),data=data,family=binomial)
summary(binomial.af)
levels(data$binary.tree.canopy.symptoms)
#predict(binomial.af,data[data$DN_AF1=0,])
#predict(binomial.af,DN_AF1=0)
# Create a data frame for predictions
new.data <- expand.grid(
dist.from.mean.af.c = seq(min(data$dist.from.mean.af.c), max(data$dist.from.mean.af.c), length.out = 100),  # keeping predictor2 constant at its mean
Area = 0  # assuming random effect is zero for prediction
)
new.data$predicted_response <- predict(binomial.af, newdata = new.data, type = "response")
p1 <- ggplot(new.data, aes(x = dist.from.mean.af.c, y = predicted_response)) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(x = "Distance from mean (C)", y = "Predicted Response") + theme_minimal()
p1
# Create a data frame for predictions
new.data.2.inf <- expand.grid(
dist.from.mean.af.c = seq(min(data$dist.from.mean.af.c), max(100), length.out = 1000), Area = 0)  # keeping predictor2 constant at its mean
new.data.2.inf$predicted_response <- predict(binomial.af, newdata = new.data.2.inf, type = "response")
p2 <- ggplot(new.data.2.inf, aes(x = dist.from.mean.af.c, y = predicted_response)) +geom_smooth(method = "glm", method.args = list(family = "binomial")) + labs(x = "Distance from mean (C)", y = "Predicted Response") + scale_x_continuous(limits = c(-10, 60)) +theme_minimal()
p2
p1 + p2
new_data <- data.frame(dist.from.mean.af.c = -2,Area=0)
predicted_response <- predict(binomial.af, newdata = new_data, type = "response")
print(predicted_response)
new_data <- data.frame(dist.from.mean.af.c = 0,Area=0)
predicted_response <- predict(binomial.af, newdata = new_data, type = "response")
print(predicted_response)
new_data <- data.frame(dist.from.mean.af.c = 2,Area=0)
predicted_response <- predict(binomial.af, newdata = new_data, type = "response")
print(predicted_response)
data.top <- data %>% filter(reclassified.tree.canopy.symptoms=="Healthy"|reclassified.tree.canopy.symptoms=="Dead Top") %>% droplevels()
top.dieback.binomial.af <- glmmTMB(top.dieback ~ dist.from.mean.af.c + (1|Area),data=data.top,family=binomial)
summary(top.dieback.binomial.af)
levels(data$top.dieback)
p3 <-ggplot(data,aes(top.dieback,dist.from.mean.af.c, fill=top.dieback ))+geom_boxplot(alpha=0.5)+theme_bw()+coord_flip() + scale_fill_manual(name="Top Dieback",values=c("#7fcdbb","#fe9929"))+guides(fill=FALSE) +labs(x="Top Dieback",y=NULL)
p4 <-ggplot(data,aes(dist.from.mean.af.c,fill=top.dieback))+geom_density(alpha=0.5) + scale_fill_manual(name="Top Dieback",values=c("#7fcdbb","#fe9929")) +theme_bw() +labs(x="Distance from Mean Afternoon Temperature") +guides(fill=FALSE)
p3 / p4
# Create a data frame for predictions
new.data.2 <- expand.grid(
dist.from.mean.af.c = seq(min(data$dist.from.mean.af.c), max(data$dist.from.mean.af.c), length.out = 100),  # keeping predictor2 constant at its mean
Area = 0  # assuming random effect is zero for prediction
)
new.data.2$predicted_response <- predict(top.dieback.binomial.af, newdata = new.data.2, type = "response")
ggplot(new.data.2, aes(x = dist.from.mean.af.c, y = predicted_response)) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(x = "Distance from Mean Temperature", y = "Predicted Response") +
theme_minimal()
new_data <- data.frame(dist.from.mean.af.c = 0,Area=0)
predicted_response <- predict(top.dieback.binomial.af, newdata = new_data, type = "response")
print(predicted_response)
new_data <- data.frame(dist.from.mean.af.c = 2,Area=0)
predicted_response <- predict(top.dieback.binomial.af, newdata = new_data, type = "response")
print(predicted_response)
data.thin <- data %>% filter(reclassified.tree.canopy.symptoms=="Healthy"|reclassified.tree.canopy.symptoms=="Thinning Canopy") %>% droplevels()
thinning.binomial.af <- glmmTMB(thinning ~ dist.from.mean.af.c + (1|Area),data=data.thin,family=binomial)
summary(thinning.binomial.af)
levels(data$thinning)
# Create a data frame for predictions
new.data.3 <- expand.grid(
dist.from.mean.af.c = seq(min(data$dist.from.mean.af.c), max(data$dist.from.mean.af.c), length.out = 100),  # keeping predictor2 constant at its mean
Area = 0  # assuming random effect is zero for prediction
)
new.data.3$predicted_response <- predict(thinning.binomial.af, newdata = new.data.3, type = "response")
ggplot(new.data.3, aes(x = dist.from.mean.af.c, y = predicted_response)) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(x = "Distance from Mean Temperature", y = "Predicted Response") +
theme_minimal()
# Unhealthy Overall
coef(binomial.af)
# Unhealthy Overall
coef(binomial.af)
exp(0.1644819)
# Top Dieback
coef(top.dieback.binomial.af)
exp(0.2385653)
# Top Dieback
coef(top.dieback.binomial.af)
exp(0.4660774)
exp(0.4660774)
# Thinning
coef(thinning.binomial.af)
exp(0.09135893)
# Thinning
coef(thinning.binomial.af)
exp(0.1195909)
